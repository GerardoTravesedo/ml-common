import csv
import tools.image_tools as image_tools
import matplotlib.pyplot as plt
import numpy as np


def write_predictions_to_file(output_file, labels, predictions):
    """
    Writes the predictions of the net into a file along with the expected labels

    :param
        output_file: file the predictions will be written to
        labels: expected labels for the different images
        predictions: predictions generated by the net
        batch_size: number of images/predictions that are being written in this call
    """
    if np.size(predictions, 0) != np.size(labels, 0):
        raise Exception("Exception writing output to file: number of "
                        "labels different from number of predictions")

    with open(output_file, 'a') as output_file:
        for index in range(0, np.size(predictions, 0)):
            output_file.write(str(labels[index]) + ", " + str(predictions[index]) + "\n")


def write_image_detection_predictions_to_file(
    output_file_for_data, output_dir_for_images, image, image_name, gt_boxes, gt_classes,
    predicted_boxes, predicted_classes):
    """
    Writes the predictions for object localization and classification to files.

    :param output_file_for_data:
    :param output_dir_for_images:
    :param image:
    :param image_name:
    :param gt_objects:
    :param predicted_boxes:
    :param predicted_classes:
    """
    predicted_objects = [{"bbox": predicted_bbox, "class": predicted_class}
                         for predicted_bbox, predicted_class in
                         zip(predicted_boxes, predicted_classes)]

    gt_objects = [{"bbox": gt_bbox, "class": gt_class}
                  for gt_bbox, gt_class in zip(gt_boxes, gt_classes)]

    result = {"gt_objects": gt_objects, "predicted_object": predicted_objects}

    # Writing all ground truth and predicted data to file so it can be analyzed further
    with open(output_file_for_data, 'a') as output_file:
        output_file.write(str(result) + "\n")

    # Generating images with ground truth and predicted boxes
    image_tools.generate_image_with_bboxes(
        image, image_name, predicted_boxes, gt_boxes, output_dir_for_images, roi_format=False)


def write_error_to_file(output_file, iteration, error):
    """
    Writes the training error for a particular iteration to a file

    :param
        output_file: file the predictions will be written to
        iteration: number of the iteration for which the error was calculated
        error: error calculated for the given iteration
    """
    with open(output_file, 'a') as output_file:
        output_file.write(str(iteration) + "," + str(error) + "\n")


def plot_error_from_file(file_with_errors):
    """
    Plots the error for each iteration coming from a file

    :param
        file_with_errors: file that contains two columns separated by a comma. The first column is
        the iteration number and the second one the error for that iteration
    """
    x = []
    y = []

    with open(file_with_errors, 'r') as errors:
        plots = csv.reader(errors, delimiter=',')
        for row in plots:
            x.append(float(row[0]))
            y.append(float(row[1]))

    plt.plot(x, y)
    plt.xlabel('Iteration')
    plt.ylabel('error')
    plt.title('Error per iteration')
    plt.legend()
    plt.show()

# plot_error_from_file("./output/error.txt")
